name: deploy

on:
  workflow_call:
    inputs:
      resource_group_name:
        description: "The name of the resource group"
        required: true
        type: string
      function_app_name:
        description: "The name of the function app"
        required: true
        type: string
      function_app_identity_id_encoded:
        description: "Base64 encoded function app identity resource ID"
        required: true
        type: string
      environment:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: "src/bot/TelegramAntiSpamBot.Functions/published"
  WORKING_DIRECTORY: src/bot/TelegramAntiSpamBot.Functions
  DOTNET_VERSION: "9.0.x"
  DOTNET_INSTALL_DIR: "./.dotnet"

jobs:
  build:
    runs-on: ubuntu-latest

    environment: ${{ inputs.environment }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: Verify Inputs
        run: |
          allowed_environments=("dev" "prod")
          if [[ ! " ${allowed_environments[@]} " =~ " ${{ inputs.environment }} " ]]; then
            echo "Invalid environment: ${{ inputs.environment }}. Allowed values are: ${allowed_environments[@]}"
            exit 1
          fi

      - name: Decode Identity ID and Setup Environment
        id: decode-identity
        run: |
          # Decode the base64 encoded identity ID
          DECODED_IDENTITY_ID=$(echo "${{ inputs.function_app_identity_id_encoded }}" | base64 -d)

          # Validate the decoded value
          if [ -z "$DECODED_IDENTITY_ID" ]; then
            echo "❌ Error: Failed to decode function app identity ID"
            exit 1
          fi

          echo "✅ Successfully decoded identity ID"
          # Make it available to subsequent steps as environment variable
          echo "DECODED_IDENTITY_ID=$DECODED_IDENTITY_ID" >> $GITHUB_ENV

      - name: "Azure login"
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Publish Using Dotnet"
        shell: bash
        run: |
          dotnet publish "${{ env.WORKING_DIRECTORY }}" --configuration Release --os linux --arch x64 --output "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"

      - name: Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: functionapp
          path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

      - name: Deploy to Azure Function App
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ inputs.function_app_name }}
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

      - name: Set Key Vault Reference Identity
        run: |
          echo "Setting Key Vault reference identity..."
          az functionapp config set \
            --name ${{ inputs.function_app_name }} \
            --resource-group ${{ inputs.resource_group_name }} \
            --setings "keyVaultReferenceIdentity=${{ env.DECODED_IDENTITY_ID }}"
